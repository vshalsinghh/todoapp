{"version":3,"sources":["components/todolist/todolist.component.jsx","components/addtodo/addtodo.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","todos","handleChange","handleDelete","className","map","todo","key","id","name","type","checked","completed","onChange","date","onClick","AddTodo","state","handleInputChange","handleSubmit","onSubmit","value","text","placeholder","length","App","checkvalue","setState","prevState","e","val","target","replace","console","log","preventDefault","Date","toJSON","slice","newTodo","concat","filter","status","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a2689e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todolist.styles.css';\r\n\r\nexport const TodoList = ({todos, handleChange, handleDelete}) => (\r\n\t<div className='todolist'>\r\n\t\t{todos.map(todo => <div key={todo.id} className='todoitem' >\r\n         <input name='completed'  \r\n         \ttype='checkbox' \r\n         \tchecked={todo.completed} \r\n         \tonChange={() => handleChange(todo.id)}/>\r\n         <p className={`${todo.completed? 'completed' : 'active'}`}>{todo.name} </p> \r\n         <p className='date'>{todo.date} </p>\r\n         <button className={`${todo.completed? 'complete' : 'active'} delete`} \r\n         onClick={() => handleDelete(todo.id)}>&#10005;</button>\r\n     \r\n      </div> )}\r\n\r\n\t</div>\r\n\r\n\t)","import React  from 'react';\r\n\r\nexport const AddTodo = ({state, handleInputChange, handleSubmit}) => {\r\n\t\r\n\treturn(\r\n\t<form onSubmit={handleSubmit}>\r\n          <input name='text'\r\n            id=\"new-todo\"\r\n            onChange={handleInputChange}\r\n            value={state.text}\r\n            placeholder='Todo...'\r\n          />\r\n          <input name='date' type='date' onChange={handleInputChange} value={state.date} />\r\n          <button>\r\n            Add #{state.todos.length + 1}\r\n          </button>\r\n        </form>\r\n\r\n\t)\r\n}","import React from 'react';\nimport './App.css';\n\nimport { TodoList } from './components/todolist/todolist.component';\nimport { AddTodo } from './components/addtodo/addtodo.component';\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    var date = new Date().toJSON().slice(0, 10);\n    this.state = {\n      todos : [],\n      filter:'all',\n      text:'',\n      date:date,\n    }\n  }\n  \n  handleChange = id =>{\n    const checkvalue = this.state.todos[id].completed;\n    \n     this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !checkvalue;\n                }\n                return todo\n            })\n            return {\n                todos: updatedTodos\n            }\n        })   \n  }\n\n  handleInputChange = e => {\n    var val=e.target.value;\n    if(e.target.name=== 'text'){\n      var regex = /[^a-z.@\\s]/ig;\n     val = e.target.value.replace(regex, '');\n    }\n    \n     console.log(val);\n\n    this.setState({[e.target.name]: val})\n    \n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    var date = new Date().toJSON().slice(0, 10);\n    if(this.state.text.length === 0 || this.state.date.length === 0){\n      return;\n    }\n    const newTodo = {\n      id: this.state.todos.length,\n      name: this.state.text,\n      completed: false,\n      date:this.state.date,\n\n    }\n    \n       this.setState(prevState => ({\n        todos: this.state.todos.concat(newTodo),\n        text:'',\n        date:date,\n       }));\n       \n  }\n\n  filter = status => {\n    this.setState({filter: status})\n\n  }\n  handleDelete = id => {\n    this.setState({todos: this.state.todos.filter(todo => todo.id !== id)})\n  }\n\n  render(){\n    let todos= [];\n    if(this.state.filter === 'all'){\n      todos=this.state.todos;\n    }\n    else if(this.state.filter === 'active'){\n      todos = this.state.todos.filter(todo => !todo.completed)\n    }\n    else{\n      todos = this.state.todos.filter(todo => todo.completed)\n    }\n      \n    return (\n    <div className=\"App\">\n      <h1> Things to do</h1>\n      <div>\n        <button onClick={() => this.filter('all')}>All</button>\n        <button onClick={() => this.filter('completed')}>Completed</button>\n        <button onClick={() => this.filter('active')}>Active</button>\n      </div>\n      \n      <AddTodo state={this.state} handleInputChange={this.handleInputChange} handleSubmit={this.handleSubmit} />\n      <div>Todos Left:{this.state.todos.filter(todo => !todo.completed).length}</div>\n      <TodoList todos={todos} handleChange={this.handleChange} handleDelete={this.handleDelete}/>\n      \n       \n\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}